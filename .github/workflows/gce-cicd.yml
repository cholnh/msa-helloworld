name: GCE CI-CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCE_INSTANCE: ${{ secrets.GCE_INSTANCE_NAME }}
  GCE_INSTANCE_ZONE: ${{ secrets.GCE_INSTANCE_ZONE }}	
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # "master" 체크아웃
    - name: Checkout
      uses: actions/checkout@v2
    
    # Gcloud 세팅
    - name: Set up Gcloud
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
    
    # GCR 연결 위한 인증 작업 실행
    - name: Set Auth GCR 
      run: gcloud --quiet auth configure-docker
    
    # Java + Gradle 기반 앱 테스트 및 빌드
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
         
    - name: Source Code Test And Build
      run: |
        chmod +x gradlew
        ./gradlew build
    
    # GCR에서 이전 버전 참고하여 다음 버전 만든 후, 이미지 빌드 및 푸쉬
    - name: Build Docker Image And Delivery To GCR
      run: |
        IMAGE=${{ secrets.IMAGE }}
        INPUT=$(gcloud container images list-tags --format='get(tags)' ${IMAGE})
        TAGS=$(echo ${INPUT[0]} | awk -F ' ' '{print $1}')
        LATEST_TAG=$(echo ${TAGS[0]} | awk -F ';' '{print $1}')
        ADD=0.01
        VERSION=$(echo "${LATEST_TAG} $ADD" | awk '{print $1 + $2}')
        NEW_VERSION=$(printf "%.2g\n" "${VERSION}")
        echo ${NEW_VERSION}
        echo ${{ secrets.IMAGE }}
        
        docker build --tag ${IMAGE}:${NEW_VERSION} .
        docker push ${IMAGE}:${NEW_VERSION}
        docker tag ${IMAGE}:${NEW_VERSION} ${IMAGE}:latest
        docker push ${IMAGE}:latest
    
    - name: Connect GCE And execute docker run
      run: |-
        gcloud compute ssh "$GCE_INSTANCE" --zone "$GCE_INSTANCE_ZONE" 
          -- 'docker ps && docker ps -q --filter "name=hello-container" | grep -q . && docker stop hello-container && docker run -d --name "hello-container" --rm -p 8080:8080 ${{ secrets.IMAGE }}'
    
    # SSH 접속을 통한 직접 배포
#     - name: Deploy to GCE
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.HOST }}
#         username: ${{ secrets.USERNAME }}
#         password: ${{ secrets.PASSWORD }}
#         script: whoami
    
    # 작업 결과 슬랙 전송
    - name: Result to Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{job.status}}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        author_name: MSA Test CI
      if: always()
